import { useState, useMemo, useEffect, useCallback } from "react";
import '../../../styles/TrainerdashboardData2.css'
import '../../../styles/TrainingProgramDasboard.css'
import Chart from "react-apexcharts";
import Odometer from "react-odometerjs";
import "odometer/themes/odometer-theme-default.css";
import { CircularProgressbar } from "react-circular-progressbar";
import "react-circular-progressbar/dist/styles.css";
import TrainingData from "./TrainingData";
import { Link } from "react-router-dom";
import EmployerOngoing from '../../mytrainings/EmployerMyTrainingChilds/EmployerOngoing'
import EmployerProposalRequest from '../../proposalMangement/Employerproposalmanagement/EmpProposalRequest'

import { getAppliedTrainingEmployer,getAllAppliedTraining} from '../../../../redux/action/employers.action'
import { useDispatch, useSelector } from 'react-redux'

const ScrollingOdometer = ({
  defaultValue1,
  defaultValue2,
  defaultValue3,
  processVal,
  delay,
}) => {
  const [value, setValue] = useState(0);
  const [animationTriggered, setAnimationTriggered] = useState(false);

  useEffect(() => {
    let intervalId;

    const startAnimation = () => {
      const defaultValues = [
        defaultValue1,
        defaultValue2,
        defaultValue3,
        processVal,
      ];
      let currentIndex = 0;

      intervalId = setInterval(() => {
        setValue(defaultValues[currentIndex]);

        currentIndex++;

        if (currentIndex === defaultValues.length) {
          clearInterval(intervalId);
          setAnimationTriggered(true);
        }
      }, 1000);
    };

    const delayTimeout = setTimeout(() => {
      startAnimation();
    }, delay);

    return () => {
      clearTimeout(delayTimeout);
      clearInterval(intervalId);
    };
  }, [
    delay,
    animationTriggered,
    defaultValue1,
    defaultValue2,
    defaultValue3,
    processVal,
  ]);
  return (
    <div>
      <Odometer
        format="(ddd).dd"
        value={value}
        options={{ duration: 1000, animation: "count" }}
      />
    </div>
  );
};

const ArrayData = [
  20, 23, 50, 60, 4, 34, 23, 44, 19, 34, 30, 22, 45, 33, 65, 79, 23, 54, 24, 56,
  64, 33, 65, 18, 20, 21, 34, 33, 45, 22, 90, 80,
];

const weekData = ArrayData.slice(0, 7);
const monthData = ArrayData.slice(0, 30);
const yearData = ArrayData.slice(0, 12);

const DashboardData = () => {
  const [open, setOpen] = useState(false);
  const [selectedOption, setSelectedOption] = useState("Weekly");
  const [categoryData, setCategoryData] = useState(weekData);

  const handleOptionClick = (option) => {
    setSelectedOption(option);
    setOpen(false);

    // Set the category data based on the selected option
    switch (option) {
      case "Weekly":
        setCategoryData(weekData);
        break;
      case "Monthly":
        setCategoryData(monthData);
        break;
      case "Yearly":
        setCategoryData(yearData);
        break;
      default:
        setCategoryData(weekData);
    }
  };

  const dataVal = useMemo(() => {
    return categoryData.map((value) => value);
  }, [categoryData]);

  //percentage calculate

  const [value, setValue] = useState(0);
  const tasks = useMemo(
    () => [
      { title: "Update Profile Picture", completed: true },
      { title: "Banner Picture", completed: true },
      { title: "Skills Upload", completed: true },
      { title: "Contact Information", completed: false },
      { title: "Premium Update", completed: false },
      { title: "Attend 50+ Session", completed: false },
    ],
    []
  );

  const calculateCompletionPercentage = useCallback(() => {
    const completedTasks = tasks.filter((task) => task.completed).length;
    const totalTasks = tasks.length;

    return (completedTasks / totalTasks) * 100;
  }, [tasks]);

  useEffect(() => {
    const interval = setInterval(() => {
      setValue(calculateCompletionPercentage);
      const element1 = document.getElementById("element1");
      const element2 = document.getElementById("element2");
      const element3 = document.getElementById("element3");

      element1.classList.add("animated1");
      element2.classList.add("animated2");
      element3.classList.add("animated3");
    }, 1000);

    return () => clearInterval(interval);
  }, [calculateCompletionPercentage]);

  const calculatedWidth = `${dataVal.length * 60}px`;
  const yAxisLabels = categoryData.map((_, index) => index + 1);

  const defaultValue1 = 20;
  const defaultValue2 = 40;
  const defaultValue3 = 200;
  const dispatch = useDispatch()

  let ongoing;
  useEffect(() => {
    dispatch(getAppliedTrainingEmployer())
    dispatch(getAllAppliedTraining())
  }, [dispatch])

  const appliedTraining = useSelector(({ employerSignUp }) => {
    return employerSignUp?.getAppliedTrainingEmployer
  })
  const proposalMangement=useSelector(({employerSignUp})=>{
    return employerSignUp?.getAllAppliedTraining?.appliedTrainingDetails
  })


  if (appliedTraining?.success) {
    ongoing = appliedTraining?.getAppliedTraining?.map((details) => {
      return {
        trainerDetails: {
          trainerId: details.trainerId,
          trainerProfileImg: details.trainerProfileImg,
          trainerName: details.trainerName,
          trainerDesignation: details.trainerDesignation,
          trainerRating: details.trainerRating
        },
        training: details?.trainingDetails?.filter(({ appliedStatus, trainingPostDetails }) => {
          if (appliedStatus) {
            // Check if training is ongoing
            return trainingPostDetails &&
              trainingPostDetails.startDate <= new Date().toISOString().substr(0, 10) &&
              trainingPostDetails.endDate >= new Date().toISOString().substr(0, 10);
          }
        })
      };
    });
  }
  // console.log('ongoing', ongoing?.length);


  return (
    <section>
      <section className="dashboardData flex items-center justify-between">
        <div className="dashboardMain">
          <div className="dashChaild1">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="54"
              height="60"
              viewBox="0 0 54 60"
              fill="none"
            >
              <mask id="path-1-inside-1_3901_1007">
                <path d="M51.2359 38.6341C50.3776 38.1635 49.4058 37.9396 48.4282 37.9871C47.4505 38.0346 46.505 38.3517 45.6963 38.9032L34.6692 44.9092C34.6283 44.9315 34.5894 44.9572 34.5528 44.986C34.3424 45.1448 34.1085 45.2698 33.8596 45.3565C34.2529 44.8721 34.4835 44.2761 34.5185 43.6531C34.5774 42.2614 33.6007 40.9306 31.6152 39.6977C27.4214 37.095 19.2072 35.378 15.9559 37.1635L15.9251 37.1813L8.7554 41.5134L8.59924 41.2436C8.1972 40.5504 7.53692 40.0446 6.7629 39.8371C5.98887 39.6295 5.16414 39.737 4.4692 40.1361L1.51105 41.8436C0.816968 42.2453 0.310623 42.9061 0.10312 43.6807C-0.104384 44.4554 0.00390524 45.2807 0.404225 45.9757L7.62803 58.4877C7.82603 58.8322 8.0904 59.134 8.40584 59.3756C8.72127 59.6172 9.0815 59.7938 9.46566 59.8952C9.72366 59.9645 9.98961 59.9997 10.2567 60C10.7859 60.0005 11.3058 59.8608 11.7636 59.5952L14.721 57.8877C15.3987 57.4958 15.8985 56.8569 16.1155 56.1047C16.3326 55.3526 16.2501 54.5456 15.8854 53.8529L16.5648 53.4138C16.6333 53.4365 16.7148 53.4618 16.8114 53.4885L27.4146 56.4015C28.2848 56.7132 29.2011 56.8766 30.1255 56.885C31.4579 56.8833 32.7619 56.4989 33.8822 55.7775L50.2387 45.9147C52.7633 44.7387 53.2194 43.0545 53.266 42.1518C53.282 41.4358 53.1011 40.7292 52.7431 40.1089C52.3852 39.4886 51.8638 38.9785 51.2359 38.6341ZM14.482 55.6097C14.4377 55.7781 14.3604 55.936 14.2546 56.0742C14.1487 56.2125 14.0165 56.3284 13.8656 56.4151L10.9081 58.1226C10.6035 58.2968 10.2424 58.3436 9.90347 58.2528C9.56453 58.162 9.27522 57.9409 9.09855 57.6377L1.87679 45.1257C1.70149 44.8213 1.65409 44.4599 1.74501 44.1206C1.83592 43.7814 2.05771 43.492 2.36171 43.3161L5.31918 41.6086C5.62353 41.4333 5.98499 41.3859 6.32424 41.4769C6.6635 41.5678 6.95282 41.7896 7.12873 42.0936L14.3525 54.6056C14.4396 54.756 14.4959 54.9223 14.5182 55.0946C14.5404 55.267 14.5281 55.4421 14.482 55.6097ZM51.5626 42.0634C51.5161 42.9689 50.7757 43.7949 49.4791 44.3921C49.4504 44.4058 49.4223 44.4202 49.3949 44.4367L32.9905 54.3255L32.9768 54.3337C32.2343 54.8054 31.3897 55.0927 30.5136 55.1714C29.6375 55.2502 28.7553 55.1182 27.9406 54.7864C27.9221 54.7803 27.9036 54.7741 27.8851 54.7693L17.2552 51.8481C17.1395 51.8166 17.0586 51.7879 16.9867 51.7632C16.7644 51.6695 16.5201 51.6403 16.2819 51.6791C16.0437 51.7178 15.8213 51.823 15.6402 51.9824L15.0292 52.3762L9.60744 42.986L16.7908 38.6464C19.2216 37.3341 26.7584 38.6827 30.7213 41.1429C32.0864 41.9901 32.8521 42.8792 32.8227 43.5819C32.7953 44.2223 32.0836 44.9366 30.8179 45.5996C28.2851 45.3019 25.7942 44.7183 23.3927 43.86C23.2867 43.825 23.1748 43.8113 23.0635 43.8196C22.9521 43.8279 22.8435 43.858 22.7438 43.9083C22.5425 44.0099 22.3897 44.1872 22.3191 44.4014C22.2486 44.6155 22.266 44.849 22.3675 45.0503C22.469 45.2517 22.6464 45.4044 22.8606 45.475C29.3412 47.6099 33.4918 47.9037 35.5418 46.3722L46.5299 40.3861C46.5443 40.3785 46.558 40.3703 46.5717 40.3621C47.1191 39.9723 47.7636 39.7414 48.434 39.6948C49.1044 39.6481 49.7747 39.7875 50.3709 40.0977C50.7296 40.2859 51.0301 40.5684 51.2401 40.9148C51.4501 41.2612 51.5616 41.6583 51.5626 42.0634ZM6.78969 45.8894C6.84555 45.9861 6.88181 46.0928 6.89642 46.2035C6.91102 46.3142 6.90367 46.4267 6.8748 46.5346C6.84592 46.6424 6.79609 46.7436 6.72813 46.8322C6.66017 46.9208 6.57543 46.9951 6.47874 47.051C6.38205 47.1068 6.27531 47.1431 6.1646 47.1577C6.0539 47.1723 5.9414 47.165 5.83353 47.1361C5.72567 47.1072 5.62455 47.0574 5.53594 46.9894C5.44733 46.9215 5.37298 46.8367 5.31713 46.74L4.26441 44.9161C4.15161 44.7208 4.12099 44.4887 4.17931 44.2709C4.23762 44.053 4.38009 43.8673 4.57536 43.7545C4.77064 43.6417 5.00272 43.6111 5.22057 43.6694C5.43842 43.7277 5.62417 43.8702 5.73698 44.0654L6.78969 45.8894ZM20.625 32.5643H40.7232C41.4258 32.5407 42.0905 32.2397 42.5718 31.7271C43.053 31.2146 43.3116 30.5322 43.2909 29.8295V10.1368C43.2902 9.92599 43.2114 9.72296 43.0697 9.56691L34.6021 0.273973C34.5222 0.187189 34.425 0.118007 34.3169 0.0708375C34.2088 0.0236678 34.092 -0.000455029 33.974 6.49955e-06H20.6236C19.9209 0.0236149 19.2562 0.324645 18.775 0.837206C18.2938 1.34977 18.0352 2.03211 18.0559 2.73488V29.8301C18.0356 30.5327 18.2943 31.2147 18.7755 31.7269C19.2567 32.2392 19.9212 32.54 20.6236 32.5636L20.625 32.5643ZM40.5156 9.28952H34.8507L34.8315 3.05131L40.5156 9.28952ZM19.7565 2.73351C19.7395 2.4825 19.8203 2.23464 19.9819 2.04186C20.1435 1.84907 20.3735 1.72631 20.6236 1.69928H33.1261L33.1521 10.1422C33.153 10.3673 33.243 10.5829 33.4024 10.7418C33.5618 10.9007 33.7777 10.99 34.0028 10.9902H41.5903V29.8288C41.6071 30.0798 41.5263 30.3277 41.3647 30.5205C41.2031 30.7134 40.9733 30.8363 40.7232 30.8637H20.6236C20.3734 30.8365 20.1435 30.7136 19.9818 30.5207C19.8202 30.3278 19.7395 30.0799 19.7565 29.8288V2.73351ZM21.8798 8.65597C21.8803 8.43126 21.9698 8.2159 22.1287 8.057C22.2876 7.8981 22.503 7.80859 22.7277 7.80805H30.5741C30.6878 7.80482 30.801 7.82443 30.907 7.86571C31.0129 7.90699 31.1096 7.96911 31.1911 8.04838C31.2727 8.12766 31.3375 8.22249 31.3818 8.32727C31.4261 8.43204 31.4489 8.54463 31.4489 8.65837C31.4489 8.77211 31.4261 8.8847 31.3818 8.98947C31.3375 9.09424 31.2727 9.18908 31.1911 9.26835C31.1096 9.34763 31.0129 9.40975 30.907 9.45103C30.801 9.49231 30.6878 9.51192 30.5741 9.50869H22.7277C22.616 9.50842 22.5055 9.48615 22.4024 9.44314C22.2993 9.40013 22.2058 9.33724 22.127 9.25804C22.0483 9.17885 21.9859 9.08492 21.9435 8.98161C21.9011 8.87831 21.8794 8.76765 21.8798 8.65597ZM21.8798 12.9024C21.8793 12.7907 21.9009 12.68 21.9433 12.5767C21.9857 12.4734 22.0481 12.3794 22.1268 12.3002C22.2056 12.221 22.2992 12.1581 22.4023 12.1151C22.5054 12.0721 22.616 12.0499 22.7277 12.0497H38.0657C38.2911 12.0497 38.5073 12.1393 38.6667 12.2987C38.8261 12.4581 38.9157 12.6743 38.9157 12.8997C38.9157 13.1251 38.8261 13.3413 38.6667 13.5007C38.5073 13.6601 38.2911 13.7497 38.0657 13.7497H22.7277C22.5026 13.7493 22.2868 13.6596 22.1278 13.5002C21.9688 13.3408 21.8796 13.1248 21.8798 12.8997V12.9024ZM21.8798 17.1489C21.879 17.037 21.9004 16.9261 21.9427 16.8224C21.9849 16.7188 22.0473 16.6246 22.126 16.5451C22.2048 16.4656 22.2985 16.4025 22.4018 16.3593C22.505 16.3161 22.6158 16.2937 22.7277 16.2935H38.0657C38.287 16.2997 38.4972 16.3921 38.6515 16.5509C38.8059 16.7097 38.8922 16.9224 38.8922 17.1438C38.8922 17.3652 38.8059 17.5779 38.6515 17.7367C38.4972 17.8955 38.287 17.9878 38.0657 17.9941H22.7277C22.5025 17.9936 22.2867 17.9037 22.1277 17.7442C21.9688 17.5847 21.8796 17.3686 21.8798 17.1434V17.1489ZM21.8798 21.3954C21.8787 21.2833 21.8998 21.172 21.9419 21.0681C21.984 20.9641 22.0462 20.8696 22.1251 20.7898C22.2039 20.71 22.2977 20.6466 22.4011 20.6033C22.5046 20.5599 22.6155 20.5375 22.7277 20.5372H38.0657C38.287 20.5435 38.4972 20.6358 38.6515 20.7946C38.8059 20.9534 38.8922 21.1661 38.8922 21.3875C38.8922 21.609 38.8059 21.8217 38.6515 21.9804C38.4972 22.1392 38.287 22.2316 38.0657 22.2379H22.7277C22.5025 22.2373 22.2867 22.1474 22.1277 21.9879C21.9688 21.8284 21.8796 21.6124 21.8798 21.3872V21.3954ZM21.8798 25.6419C21.8783 25.5295 21.8992 25.418 21.9411 25.3137C21.983 25.2095 22.0452 25.1146 22.1241 25.0345C22.2029 24.9544 22.2969 24.8908 22.4005 24.8473C22.5041 24.8038 22.6153 24.7812 22.7277 24.7809H38.0657C38.287 24.7872 38.4972 24.8796 38.6515 25.0384C38.8059 25.1971 38.8922 25.4098 38.8922 25.6313C38.8922 25.8527 38.8059 26.0654 38.6515 26.2242C38.4972 26.383 38.287 26.4753 38.0657 26.4816H22.7277C22.5026 26.481 22.2869 26.3913 22.128 26.2319C21.969 26.0726 21.8798 25.8567 21.8798 25.6316V25.6419Z" />
              </mask>
              <path
                d="M51.2359 38.6341C50.3776 38.1635 49.4058 37.9396 48.4282 37.9871C47.4505 38.0346 46.505 38.3517 45.6963 38.9032L34.6692 44.9092C34.6283 44.9315 34.5894 44.9572 34.5528 44.986C34.3424 45.1448 34.1085 45.2698 33.8596 45.3565C34.2529 44.8721 34.4835 44.2761 34.5185 43.6531C34.5774 42.2614 33.6007 40.9306 31.6152 39.6977C27.4214 37.095 19.2072 35.378 15.9559 37.1635L15.9251 37.1813L8.7554 41.5134L8.59924 41.2436C8.1972 40.5504 7.53692 40.0446 6.7629 39.8371C5.98887 39.6295 5.16414 39.737 4.4692 40.1361L1.51105 41.8436C0.816968 42.2453 0.310623 42.9061 0.10312 43.6807C-0.104384 44.4554 0.00390524 45.2807 0.404225 45.9757L7.62803 58.4877C7.82603 58.8322 8.0904 59.134 8.40584 59.3756C8.72127 59.6172 9.0815 59.7938 9.46566 59.8952C9.72366 59.9645 9.98961 59.9997 10.2567 60C10.7859 60.0005 11.3058 59.8608 11.7636 59.5952L14.721 57.8877C15.3987 57.4958 15.8985 56.8569 16.1155 56.1047C16.3326 55.3526 16.2501 54.5456 15.8854 53.8529L16.5648 53.4138C16.6333 53.4365 16.7148 53.4618 16.8114 53.4885L27.4146 56.4015C28.2848 56.7132 29.2011 56.8766 30.1255 56.885C31.4579 56.8833 32.7619 56.4989 33.8822 55.7775L50.2387 45.9147C52.7633 44.7387 53.2194 43.0545 53.266 42.1518C53.282 41.4358 53.1011 40.7292 52.7431 40.1089C52.3852 39.4886 51.8638 38.9785 51.2359 38.6341ZM14.482 55.6097C14.4377 55.7781 14.3604 55.936 14.2546 56.0742C14.1487 56.2125 14.0165 56.3284 13.8656 56.4151L10.9081 58.1226C10.6035 58.2968 10.2424 58.3436 9.90347 58.2528C9.56453 58.162 9.27522 57.9409 9.09855 57.6377L1.87679 45.1257C1.70149 44.8213 1.65409 44.4599 1.74501 44.1206C1.83592 43.7814 2.05771 43.492 2.36171 43.3161L5.31918 41.6086C5.62353 41.4333 5.98499 41.3859 6.32424 41.4769C6.6635 41.5678 6.95282 41.7896 7.12873 42.0936L14.3525 54.6056C14.4396 54.756 14.4959 54.9223 14.5182 55.0946C14.5404 55.267 14.5281 55.4421 14.482 55.6097ZM51.5626 42.0634C51.5161 42.9689 50.7757 43.7949 49.4791 44.3921C49.4504 44.4058 49.4223 44.4202 49.3949 44.4367L32.9905 54.3255L32.9768 54.3337C32.2343 54.8054 31.3897 55.0927 30.5136 55.1714C29.6375 55.2502 28.7553 55.1182 27.9406 54.7864C27.9221 54.7803 27.9036 54.7741 27.8851 54.7693L17.2552 51.8481C17.1395 51.8166 17.0586 51.7879 16.9867 51.7632C16.7644 51.6695 16.5201 51.6403 16.2819 51.6791C16.0437 51.7178 15.8213 51.823 15.6402 51.9824L15.0292 52.3762L9.60744 42.986L16.7908 38.6464C19.2216 37.3341 26.7584 38.6827 30.7213 41.1429C32.0864 41.9901 32.8521 42.8792 32.8227 43.5819C32.7953 44.2223 32.0836 44.9366 30.8179 45.5996C28.2851 45.3019 25.7942 44.7183 23.3927 43.86C23.2867 43.825 23.1748 43.8113 23.0635 43.8196C22.9521 43.8279 22.8435 43.858 22.7438 43.9083C22.5425 44.0099 22.3897 44.1872 22.3191 44.4014C22.2486 44.6155 22.266 44.849 22.3675 45.0503C22.469 45.2517 22.6464 45.4044 22.8606 45.475C29.3412 47.6099 33.4918 47.9037 35.5418 46.3722L46.5299 40.3861C46.5443 40.3785 46.558 40.3703 46.5717 40.3621C47.1191 39.9723 47.7636 39.7414 48.434 39.6948C49.1044 39.6481 49.7747 39.7875 50.3709 40.0977C50.7296 40.2859 51.0301 40.5684 51.2401 40.9148C51.4501 41.2612 51.5616 41.6583 51.5626 42.0634ZM6.78969 45.8894C6.84555 45.9861 6.88181 46.0928 6.89642 46.2035C6.91102 46.3142 6.90367 46.4267 6.8748 46.5346C6.84592 46.6424 6.79609 46.7436 6.72813 46.8322C6.66017 46.9208 6.57543 46.9951 6.47874 47.051C6.38205 47.1068 6.27531 47.1431 6.1646 47.1577C6.0539 47.1723 5.9414 47.165 5.83353 47.1361C5.72567 47.1072 5.62455 47.0574 5.53594 46.9894C5.44733 46.9215 5.37298 46.8367 5.31713 46.74L4.26441 44.9161C4.15161 44.7208 4.12099 44.4887 4.17931 44.2709C4.23762 44.053 4.38009 43.8673 4.57536 43.7545C4.77064 43.6417 5.00272 43.6111 5.22057 43.6694C5.43842 43.7277 5.62417 43.8702 5.73698 44.0654L6.78969 45.8894ZM20.625 32.5643H40.7232C41.4258 32.5407 42.0905 32.2397 42.5718 31.7271C43.053 31.2146 43.3116 30.5322 43.2909 29.8295V10.1368C43.2902 9.92599 43.2114 9.72296 43.0697 9.56691L34.6021 0.273973C34.5222 0.187189 34.425 0.118007 34.3169 0.0708375C34.2088 0.0236678 34.092 -0.000455029 33.974 6.49955e-06H20.6236C19.9209 0.0236149 19.2562 0.324645 18.775 0.837206C18.2938 1.34977 18.0352 2.03211 18.0559 2.73488V29.8301C18.0356 30.5327 18.2943 31.2147 18.7755 31.7269C19.2567 32.2392 19.9212 32.54 20.6236 32.5636L20.625 32.5643ZM40.5156 9.28952H34.8507L34.8315 3.05131L40.5156 9.28952ZM19.7565 2.73351C19.7395 2.4825 19.8203 2.23464 19.9819 2.04186C20.1435 1.84907 20.3735 1.72631 20.6236 1.69928H33.1261L33.1521 10.1422C33.153 10.3673 33.243 10.5829 33.4024 10.7418C33.5618 10.9007 33.7777 10.99 34.0028 10.9902H41.5903V29.8288C41.6071 30.0798 41.5263 30.3277 41.3647 30.5205C41.2031 30.7134 40.9733 30.8363 40.7232 30.8637H20.6236C20.3734 30.8365 20.1435 30.7136 19.9818 30.5207C19.8202 30.3278 19.7395 30.0799 19.7565 29.8288V2.73351ZM21.8798 8.65597C21.8803 8.43126 21.9698 8.2159 22.1287 8.057C22.2876 7.8981 22.503 7.80859 22.7277 7.80805H30.5741C30.6878 7.80482 30.801 7.82443 30.907 7.86571C31.0129 7.90699 31.1096 7.96911 31.1911 8.04838C31.2727 8.12766 31.3375 8.22249 31.3818 8.32727C31.4261 8.43204 31.4489 8.54463 31.4489 8.65837C31.4489 8.77211 31.4261 8.8847 31.3818 8.98947C31.3375 9.09424 31.2727 9.18908 31.1911 9.26835C31.1096 9.34763 31.0129 9.40975 30.907 9.45103C30.801 9.49231 30.6878 9.51192 30.5741 9.50869H22.7277C22.616 9.50842 22.5055 9.48615 22.4024 9.44314C22.2993 9.40013 22.2058 9.33724 22.127 9.25804C22.0483 9.17885 21.9859 9.08492 21.9435 8.98161C21.9011 8.87831 21.8794 8.76765 21.8798 8.65597ZM21.8798 12.9024C21.8793 12.7907 21.9009 12.68 21.9433 12.5767C21.9857 12.4734 22.0481 12.3794 22.1268 12.3002C22.2056 12.221 22.2992 12.1581 22.4023 12.1151C22.5054 12.0721 22.616 12.0499 22.7277 12.0497H38.0657C38.2911 12.0497 38.5073 12.1393 38.6667 12.2987C38.8261 12.4581 38.9157 12.6743 38.9157 12.8997C38.9157 13.1251 38.8261 13.3413 38.6667 13.5007C38.5073 13.6601 38.2911 13.7497 38.0657 13.7497H22.7277C22.5026 13.7493 22.2868 13.6596 22.1278 13.5002C21.9688 13.3408 21.8796 13.1248 21.8798 12.8997V12.9024ZM21.8798 17.1489C21.879 17.037 21.9004 16.9261 21.9427 16.8224C21.9849 16.7188 22.0473 16.6246 22.126 16.5451C22.2048 16.4656 22.2985 16.4025 22.4018 16.3593C22.505 16.3161 22.6158 16.2937 22.7277 16.2935H38.0657C38.287 16.2997 38.4972 16.3921 38.6515 16.5509C38.8059 16.7097 38.8922 16.9224 38.8922 17.1438C38.8922 17.3652 38.8059 17.5779 38.6515 17.7367C38.4972 17.8955 38.287 17.9878 38.0657 17.9941H22.7277C22.5025 17.9936 22.2867 17.9037 22.1277 17.7442C21.9688 17.5847 21.8796 17.3686 21.8798 17.1434V17.1489ZM21.8798 21.3954C21.8787 21.2833 21.8998 21.172 21.9419 21.0681C21.984 20.9641 22.0462 20.8696 22.1251 20.7898C22.2039 20.71 22.2977 20.6466 22.4011 20.6033C22.5046 20.5599 22.6155 20.5375 22.7277 20.5372H38.0657C38.287 20.5435 38.4972 20.6358 38.6515 20.7946C38.8059 20.9534 38.8922 21.1661 38.8922 21.3875C38.8922 21.609 38.8059 21.8217 38.6515 21.9804C38.4972 22.1392 38.287 22.2316 38.0657 22.2379H22.7277C22.5025 22.2373 22.2867 22.1474 22.1277 21.9879C21.9688 21.8284 21.8796 21.6124 21.8798 21.3872V21.3954ZM21.8798 25.6419C21.8783 25.5295 21.8992 25.418 21.9411 25.3137C21.983 25.2095 22.0452 25.1146 22.1241 25.0345C22.2029 24.9544 22.2969 24.8908 22.4005 24.8473C22.5041 24.8038 22.6153 24.7812 22.7277 24.7809H38.0657C38.287 24.7872 38.4972 24.8796 38.6515 25.0384C38.8059 25.1971 38.8922 25.4098 38.8922 25.6313C38.8922 25.8527 38.8059 26.0654 38.6515 26.2242C38.4972 26.383 38.287 26.4753 38.0657 26.4816H22.7277C22.5026 26.481 22.2869 26.3913 22.128 26.2319C21.969 26.0726 21.8798 25.8567 21.8798 25.6316V25.6419Z"
                stroke-width="10"
                mask="url(#path-1-inside-1_3901_1007)"
              />
            </svg>
          </div>
          <div className="dashChaild2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="19"
              height="21"
              viewBox="0 0 19 21"
              fill="none"
            >
              <path d="M18 8.76795C19.3333 9.53775 19.3333 11.4623 18 12.2321L3.75 20.4593C2.41666 21.2291 0.749999 20.2668 0.749999 18.7272L0.75 2.27276C0.75 0.733156 2.41667 -0.229094 3.75 0.540707L18 8.76795Z" />
            </svg>
          </div>

          <div className="dashChaild3">
            <Link to="/trainerDashboard/proposalmanagement"><h4 className="">Applications</h4></Link>
            {defaultValue1 > 99 ? (
              <h3 className="dashChaild5">
                <ScrollingOdometer defaultValue1={99} delay={0} />
                <span>+</span>
              </h3>
            ) : (
              <h3 className="dashChaild5">
                <ScrollingOdometer defaultValue1={defaultValue1} delay={0} />
              </h3>
            )}
          </div>
        </div>
        <div className="dashboardMain">
          <div className="dashChaild1">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="54"
              height="60"
              viewBox="0 0 60 54"
              fill="none"
            >
              <path
                d="M49.4426 0H10.4918C4.72131 0 0 4.72131 0 10.4918V32.1311C0 37.9016 4.72131 42.623 10.4918 42.623H14.0984L20.3934 52.459C20.8525 53.1803 21.5738 53.5738 22.4262 53.5738C23.2787 53.5738 24 53.1803 24.459 52.459L30.7541 42.623H49.5082C55.2787 42.623 60 37.9016 60 32.1311V10.4918C59.9344 4.72131 55.2131 0 49.4426 0ZM57.3115 32.1967C57.3115 36.5246 53.7705 40.0656 49.4426 40.0656H29.9672C29.5082 40.0656 29.1148 40.2623 28.8525 40.6557L22.3607 50.8197L15.8689 40.6557C15.6066 40.2623 15.2131 40.0656 14.7541 40.0656H10.4262C6.09836 40.0656 2.55738 36.5246 2.55738 32.1967V10.5574C2.55738 6.22951 6.09836 2.68852 10.4262 2.68852H49.377C53.7049 2.68852 57.2459 6.22951 57.2459 10.5574V32.1967H57.3115Z"
                fill="white"
              />
              <path
                d="M46.9524 15.2773H11.2802C10.5589 15.2773 9.96875 15.8675 9.96875 16.5888C9.96875 17.3101 10.5589 17.9003 11.2802 17.9003H46.9524C47.6737 17.9003 48.2638 17.3101 48.2638 16.5888C48.2638 15.8675 47.6737 15.2773 46.9524 15.2773Z"
                fill="white"
              />
              <path
                d="M30.7556 23.9336H11.2802C10.5589 23.9336 9.96875 24.5238 9.96875 25.2451C9.96875 25.9664 10.5589 26.5565 11.2802 26.5565H30.7556C31.4769 26.5565 32.0671 25.9664 32.0671 25.2451C32.0671 24.5238 31.4769 23.9336 30.7556 23.9336Z"
                fill="white"
              />
            </svg>
          </div>
          <div className="dashChaild2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="19"
              height="21"
              viewBox="0 0 19 21"
              fill="none"
            >
              <path d="M18 8.76795C19.3333 9.53775 19.3333 11.4623 18 12.2321L3.75 20.4593C2.41666 21.2291 0.749999 20.2668 0.749999 18.7272L0.75 2.27276C0.75 0.733156 2.41667 -0.229094 3.75 0.540707L18 8.76795Z" />
            </svg>
          </div>

          <div className="dashChaild3 ">
            <Link to="/trainerDashboard/messages"><h4 className="">Messages</h4></Link>
            {defaultValue2 > 99 ? (
              <h3 className="dashChaild5">
                <ScrollingOdometer defaultValue2={99} delay={2000} />
                <span>+</span>
              </h3>
            ) : (
              <h3 className="dashChaild5">
                <ScrollingOdometer defaultValue2={defaultValue2} delay={2000} />
              </h3>
            )}
          </div>
        </div>
        <div className="dashboardMain">
          <div className="dashChaild1">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="54"
              height="60"
              viewBox="0 0 60 54"
              fill="none"
            >
              <path
                d="M17.2421 31.0117C17.8105 31.0117 18.2526 30.5696 18.2526 30.0012C18.2526 29.4328 17.8105 28.9907 17.2421 28.9907H9.85263C9.34737 26.717 7.38947 25.0117 4.98947 25.0117C2.21053 25.0117 0 27.2222 0 30.0012C0 32.7801 2.21053 34.9907 4.98947 34.9907C7.38947 34.9907 9.41053 33.2854 9.85263 31.0117H17.2421ZM4.98947 32.9065C3.34737 32.9065 2.08421 31.5801 2.08421 30.0012C2.08421 28.3591 3.41053 27.0959 4.98947 27.0959C6.56842 27.0959 7.89474 28.4222 7.89474 30.0012C7.89474 31.5801 6.63158 32.9065 4.98947 32.9065Z"
                fill="white"
              />
              <path
                d="M12.3171 17.3033C13.2645 17.3033 14.2118 17.0507 15.0329 16.4823L20.275 21.7244C20.4645 21.9139 20.7171 22.0402 21.0329 22.0402C21.2855 22.0402 21.5382 21.9139 21.7908 21.7244C22.1697 21.3454 22.1697 20.6507 21.7908 20.2718L16.5487 15.0296C17.8118 13.0718 17.6224 10.4823 15.9171 8.77701C13.9592 6.81912 10.8013 6.81912 8.84342 8.77701C6.88553 10.7349 6.88553 13.8928 8.84342 15.8507C9.79079 16.7981 11.0539 17.3033 12.3171 17.3033ZM10.2329 10.2296C10.8013 9.66123 11.5592 9.34544 12.3171 9.34544C13.075 9.34544 13.8329 9.66123 14.4013 10.2296C15.5382 11.3665 15.5382 13.2612 14.4013 14.3981C13.2645 15.5349 11.3697 15.5349 10.2329 14.3981C9.09605 13.1981 9.09605 11.3665 10.2329 10.2296Z"
                fill="white"
              />
              <path
                d="M28.9907 9.85263V17.2421C28.9907 17.8105 29.4328 18.2526 30.0012 18.2526C30.5696 18.2526 31.0117 17.8105 31.0117 17.2421V9.85263C33.2854 9.34737 34.9907 7.38947 34.9907 4.98947C34.9907 2.21053 32.7801 0 30.0012 0C27.2222 0 25.0117 2.21053 25.0117 4.98947C25.0117 7.38947 26.717 9.34737 28.9907 9.85263ZM30.0012 2.02105C31.6433 2.02105 32.9065 3.34737 32.9065 4.92632C32.9065 6.50526 31.5801 7.83158 30.0012 7.83158C28.3591 7.83158 27.0959 6.50526 27.0959 4.92632C27.0959 3.34737 28.3591 2.02105 30.0012 2.02105Z"
                fill="white"
              />
              <path
                d="M39.0304 21.9769C39.283 21.9769 39.5357 21.8505 39.7883 21.6611L45.0304 16.419C45.8514 16.9242 46.7988 17.24 47.7462 17.24C49.0725 17.24 50.3356 16.7347 51.283 15.7874C52.2304 14.84 52.7357 13.5768 52.7357 12.2505C52.7357 10.9242 52.2304 9.66106 51.283 8.71369C50.2725 7.82948 49.0093 7.32422 47.683 7.32422C46.3567 7.32422 45.0935 7.82948 44.1462 8.77685C43.1988 9.72422 42.6935 10.9874 42.6935 12.3137C42.6935 13.3242 43.0093 14.2084 43.5146 15.0295L38.2725 20.2716C37.8935 20.6505 37.8935 21.3453 38.2725 21.7242C38.462 21.9137 38.7146 21.9769 39.0304 21.9769ZM45.5988 10.2295C46.1672 9.66106 46.862 9.34527 47.683 9.34527C48.4409 9.34527 49.1988 9.66106 49.7672 10.2295C50.3357 10.7979 50.6514 11.4926 50.6514 12.3137C50.6514 13.0716 50.3357 13.8295 49.7672 14.3979C48.6304 15.5347 46.7356 15.5347 45.5988 14.3979C45.0304 13.8295 44.7146 13.1347 44.7146 12.3137C44.7778 11.4926 45.0304 10.7979 45.5988 10.2295Z"
                fill="white"
              />
              <path
                d="M55.0093 25.0117C52.6093 25.0117 50.5882 26.717 50.1461 28.9907H42.7566C42.1882 28.9907 41.7461 29.4328 41.7461 30.0012C41.7461 30.5696 42.1882 31.0117 42.7566 31.0117H50.1461C50.6514 33.2854 52.6093 34.9907 55.0093 34.9907C57.7882 34.9907 59.9987 32.7801 59.9987 30.0012C59.9987 27.2222 57.7882 25.0117 55.0093 25.0117ZM55.0093 32.9065C53.3671 32.9065 52.104 31.5801 52.104 30.0012C52.104 28.3591 53.4303 27.0959 55.0093 27.0959C56.6514 27.0959 57.9145 28.4222 57.9145 30.0012C57.9145 31.5801 56.6514 32.9065 55.0093 32.9065Z"
                fill="white"
              />
              <path
                d="M34.2935 36.6956C36.504 35.3061 38.0198 32.7798 38.0198 30.0009C38.0198 25.5798 34.4198 22.043 30.0619 22.043C25.6409 22.043 22.104 25.643 22.104 30.0009C22.104 32.843 23.5567 35.3061 25.8303 36.6956C20.904 38.464 17.3672 43.1377 17.3672 48.6956V52.8009C17.3672 53.3693 17.8093 53.8114 18.3777 53.8114H41.8093C42.3777 53.8114 42.8198 53.3693 42.8198 52.8009V48.6956C42.7567 43.1377 39.2198 38.464 34.2935 36.6956ZM24.0619 30.0009C24.0619 26.7167 26.7146 24.064 29.9988 24.064C33.283 24.064 35.9356 26.7167 35.9356 30.0009C35.9356 33.2851 33.283 35.9377 29.9988 35.9377C26.7146 35.8746 24.0619 33.2219 24.0619 30.0009ZM40.6725 51.7903H37.5777V47.4324C37.5777 46.864 37.1356 46.4219 36.5672 46.4219C35.9988 46.4219 35.5567 46.864 35.5567 47.4324V51.7903H24.504V47.4324C24.504 46.864 24.0619 46.4219 23.4935 46.4219C22.9251 46.4219 22.4198 46.8009 22.4198 47.3693V51.7272H19.3251V48.6324C19.3251 42.7588 24.1251 37.9588 29.9988 37.9588C35.8724 37.9588 40.6725 42.7588 40.6725 48.6324V51.7903Z"
                fill="white"
              />
            </svg>
          </div>
          <div className="dashChaild2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="19"
              height="21"
              viewBox="0 0 19 21"
              fill="none"
            >
              <path d="M18 8.76795C19.3333 9.53775 19.3333 11.4623 18 12.2321L3.75 20.4593C2.41666 21.2291 0.749999 20.2668 0.749999 18.7272L0.75 2.27276C0.75 0.733156 2.41667 -0.229094 3.75 0.540707L18 8.76795Z" />
            </svg>
          </div>

          <div className="dashChaild3">
            <Link to=""><h4 className="">Skills</h4></Link>
            {defaultValue3 > 99 ? (
              <h3 className="dashChaild5">
                <ScrollingOdometer defaultValue3={99} delay={4000} />
                <span>+</span>
              </h3>
            ) : (
              <h3 className="dashChaild5">
                <ScrollingOdometer defaultValue3={defaultValue3} delay={4000} />
              </h3>
            )}
          </div>
        </div>
      </section>
      <section className="flex w-full">
        <div className="flex flex-col w-[73%]">
          <div className="graphMain" style={{ marginTop: "20px" }}>
            <div style={{ padding: "20px" }}>
              <h3
                style={{
                  fontSize: "18px",
                  fontWeight: "500",
                  color: "#535353",
                }}
              >
                Statistics of kowshik’s
              </h3>
              <div className="flex justify-between">
                <div className="graph">
                  <Chart
                    type="bar"
                    height={390}
                    width={calculatedWidth}
                    series={[
                      {
                        name: "No of Views",
                        data: dataVal,
                      },
                    ]}
                    options={{
                      theme: { mode: "light" },
                      xaxis: {
                        tickPlacement: "on",
                        categories: yAxisLabels,

                        labels: {
                          style: {
                            fontSize: "16px",
                            colors: "#8D8D8D",
                            fontWeight: "500",
                          },
                        },
                      },
                      yaxis: {
                        labels: {
                          formatter: (val) => {
                            return `${val}`;
                          },
                          style: {
                            fontSize: "16px",
                            colors: ["#8D8D8D"],
                            fontWeight: "500",
                          },
                        },
                      },
                      legend: {
                        show: true,
                        position: "right",
                      },
                      dataLabels: {
                        formatter: (val) => {
                          return `${val}`;
                        },
                        style: {
                          colors: ["#8D8D8D"],
                          fontSize: 15,
                        },
                      },
                      plotOptions: {
                        bar: {
                          columnWidth: "30px",
                          borderRadius: 4,
                          colors: {
                            ranges: [
                              {
                                from: 0,
                                to: 20,
                                color: "#C22626", // Red color for values 0-10
                              },

                              {
                                from: 21,
                                to: 30,
                                color: "#27D380", // Green color for values 21-30
                              },
                              {
                                from: 31,
                                to: Infinity,
                                color: "#2652C2", // Blue color for values 31-100
                              },
                              {
                                opacityFrom: 0.7,
                                opacityTo: 0.3,
                              },
                            ],
                          },
                        },
                      },
                      fill: {
                        type: "gradient",
                        gradient: {
                          shade: "light",
                          type: "vertical",
                          shadeIntensity: 0.1,
                          opacityFrom: 1,
                          opacityTo: 0.4,
                          stops: [0, 75, 100],
                        },
                      },
                      chart: {
                        toolbar: {
                          show: false,
                        },
                      },
                      tooltip: {
                        style: {
                          fontSize: "14px",
                          fontFamily: "Arial, sans-serif",
                          fontWeight: "bold",
                        },
                        x: {
                          formatter: function (val) {
                            return `Day: ${val}`;
                          },
                        },
                      },
                    }}
                  ></Chart>
                </div>

                <div>
                  <div style={{ position: "relative" }}>
                    <div
                      className="flex items-center justify-between cursor-pointer"
                      style={{
                        width: "250px",
                        height: "40px",
                        border: "1px solid #DEDEDE",
                        paddingLeft: "20px",
                        paddingRight: "20px",
                      }}
                      onClick={() => setOpen(!open)}
                    >
                      <h3
                        style={{
                          fontSize: "18px",
                          fontWeight: "400",
                          color: "#535353",
                        }}
                      >
                        {selectedOption}
                      </h3>
                      {open ? (
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="20"
                          height="14"
                          viewBox="0 0 20 14"
                          fill="none"
                        >
                          <path
                            d="M12.2222 0.00065068L12.2222 2.22287L7.77778 2.22287L7.77778 0.000650291L12.2222 0.00065068ZM16.6667 5.55621L16.6667 7.77843L3.33333 7.77843L3.33333 5.55621L16.6667 5.55621ZM20 11.1118L20 13.334L0 13.334L1.94273e-07 11.1118L20 11.1118Z"
                            fill="#B8B8B8"
                          />
                        </svg>
                      ) : (
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="20"
                          height="15"
                          viewBox="0 0 20 15"
                          fill="none"
                        >
                          <path
                            d="M7.77778 14.1654V11.9431H12.2222V14.1654H7.77778ZM3.33333 8.60981V6.38759H16.6667V8.60981H3.33333ZM0 3.05425V0.832031H20V3.05425H0Z"
                            fill="#B8B8B8"
                          />
                        </svg>
                      )}
                    </div>
                    {open && (
                      <div
                        className="dropdown-options cursor-pointer "
                        style={{
                          position: "absolute",
                          top: "100%",
                          left: 0,
                          width: "100%",
                          border: "1px solid #DEDEDE",
                        }}
                      >
                        <div
                          className="dropOption"
                          onClick={() => handleOptionClick("Weekly")}
                        >
                          Weekly
                        </div>
                        <div
                          className="dropOption"
                          onClick={() => handleOptionClick("Monthly")}
                        >
                          Monthly
                        </div>
                        <div
                          className="dropOption"
                          onClick={() => handleOptionClick("Yearly")}
                        >
                          Yearly
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="graphLabel">
                    <div className="flex items-center">
                      <div
                        className="graphChild"
                        style={{
                          background:
                            "linear-gradient(143deg, #2676C2 5.68%, rgba(38, 118, 194, 0.00) 109.56%)",
                        }}
                      ></div>
                      <h3 style={{ fontSize: "16px" }}>More than 30 views</h3>
                    </div>
                    <div className="flex items-center mt-7 mb-7">
                      <div
                        className="graphChild"
                        style={{
                          background:
                            "linear-gradient(143deg, #27D380 5.68%, rgba(38, 118, 194, 0.00) 109.56%)",
                        }}
                      ></div>
                      <h3 style={{ fontSize: "16px" }}>20 - 30 views</h3>
                    </div>
                    <div className="flex items-center">
                      <div
                        className="graphChild"
                        style={{
                          background:
                            "linear-gradient(143deg, #C22626 5.68%, rgba(194, 38, 38, 0.00) 109.56%)",
                        }}
                      ></div>
                      <h3 style={{ fontSize: "16px" }}>10 - 20 views</h3>
                    </div>
                  </div>
                  <button
                    className="mt-10"
                    style={{
                      width: "250px",
                      height: "40px",
                      backgroundColor: "#2676C2",
                      color: "#FFFFFF",
                      borderRadius: "5px",
                    }}
                  >
                    Optimize
                  </button>
                </div>
              </div>
            </div>
          </div>
          <div
            className="processMain flex justify-between"
            style={{ marginTop: "20px" }}
          >
            <div className="w-[50%]">
              <div className="processData">
                <h3 style={{ fontWeight: "500", marginBottom: "10px" }}>
                  Profile Completion
                </h3>
                {tasks.map((task, index) => (
                  <div
                    key={index}
                    className="trainer-dashboard-task flex justify-start items-center mb-2"
                  >
                    <h3>
                      {task.title}
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="15"
                        height="15"
                        viewBox="0 0 15 15"
                        fill={task.completed ? "#2676C2" : "#CACACA"}
                      >
                        <circle
                          cx="7.5"
                          cy="7.5"
                          r="7.5"
                          fill={task.completed ? "#2676C2" : "#CACACA"}
                        />
                        <path
                          d="M3 7.68201L6.18198 10.864L12.5453 4.5"
                          stroke="white"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </h3>
                  </div>
                ))}
              </div>
            </div>
            <div className="processing-child2">
              <h4
                className="m-3"
                style={{
                  color: "#FFFFFF",
                  fontSize: "30px",
                  fontWeight: "400",
                }}
              >
                Processing
              </h4>
              <div
                style={{
                  width: "70%",
                  height: "260px",
                  margin: "auto",
                  position: "relative",
                  background: "#2676C2",
                  borderRadius: "50%",
                }}
              >
                <CircularProgressbar
                  value={value}
                  text={`${value}%`}
                  strokeWidth={4}
                  styles={{
                    root: { position: "absolute" },
                    path: {
                      stroke: "rgba(255, 255, 255, 0.6)",
                      strokeWidth: 4,
                      transition: "stroke-dashoffset 2s ease-in-out",
                      height: "100px", // Adjust the height as needed
                      fill: "",
                    },
                    trail: {
                      stroke: "rgb(231 246 255 / 27%)",
                      strokeWidth: 4,
                      height: "100px", // Adjust the height as needed
                    },
                    text: {
                      fill: "#FFF",
                      fontSize: "20px",
                      fontWeight: "bold",
                    },

                  }}
                />
              </div>
              <span className="animate1" id="element1">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="36"
                  height="36"
                  viewBox="0 0 36 36"
                  fill="none"
                >
                  <circle opacity="0.1" cx="18" cy="18" r="18" fill="white" />
                </svg>
              </span>
              <span className="animate2" id="element2">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="18"
                  height="18"
                  viewBox="0 0 18 18"
                  fill="none"
                >
                  <circle opacity="0.3" cx="9" cy="9" r="9" fill="white" />
                </svg>
              </span>
              <span className="animate3" id="element3">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="6"
                  height="6"
                  viewBox="0 0 6 6"
                  fill="none"
                >
                  <circle opacity="0.2" cx="3" cy="3" r="3" fill="white" />
                </svg>
              </span>
            </div>
          </div>
        </div>
        <div className="w-[25%]">
          <TrainingData />
        </div>
      </section>
      <section className="w-full mt-[20px] flex justify-center bg-[#EAF2F9] h-[auto] pb-[20px] items-center flex-col rounded-lg">
        <div className="w-[95%]">
          <div className="w-full mt-[10px] flex justify-between items-center">
            <h3 style={{ fontSize: "18px", color: "rgb(83, 83, 83)", fontWeight: "500" }}>Ongoing Training</h3>
            <Link to="/employerDashboard/trainingmanagement/ongoing"><h3 className="textChild" style={{ fontWeight: "500" }}>My Training</h3></Link>
          </div>
          <EmployerOngoing onGoing={ongoing} />
        </div>
      </section>
      <section className="mt-4 w-full">
        <div
          style={{
            // height: "485px",
            // width: "1020px",
            backgroundColor: "#EAF2F9",
            padding: "22px 37px",
            borderRadius: "10px",
          }}
        >
          <div className="praposalChild flex items-center justify-between">
            <h3 style={{ fontSize: "18px", color: "#535353" }}>
              Recent Proposal for you
            </h3>
            <Link to="/employerDashboard/proposalmanagement/proposal"><h3 className="textChild">Proposal Management</h3></Link>
          </div>
          <div className="allaround">
            <EmployerProposalRequest appliedTrainingDetails={proposalMangement?.slice(0,1)}/>
          </div>
        </div>
      </section>
    </section>
  );
};

export default DashboardData;
